/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef, useEffect } from "react";
import { photoHandler } from "../../utils/photoHandler";
import { Select } from "@react-three/postprocessing";
import { awsModelPath } from "../../utils/awsModelPath";
import { TextureLoader } from "three/src/Three.js";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Cube010: THREE.Mesh;
    Cube010_1: THREE.Mesh;
    Cube009: THREE.Mesh;
    Cube009_1: THREE.Mesh;
    Cube011: THREE.Mesh;
    Cube011_1: THREE.Mesh;
    Cube014: THREE.Mesh;
    Cube014_1: THREE.Mesh;
    Cube015: THREE.Mesh;
    Cube015_1: THREE.Mesh;
    Cube016: THREE.Mesh;
    Cube016_1: THREE.Mesh;
    Cube017: THREE.Mesh;
    Cube017_1: THREE.Mesh;
    Cube: THREE.Mesh;
    Cube_1: THREE.Mesh;
  };
  materials: {
    [key: string]: THREE.MeshStandardMaterial;
    bookbinding1: THREE.MeshStandardMaterial;
    photoImg2: THREE.MeshStandardMaterial;
    bookbinding7: THREE.MeshStandardMaterial;
    photoImg1: THREE.MeshStandardMaterial;
    ["text.001"]: THREE.MeshStandardMaterial;
    photoImg3: THREE.MeshStandardMaterial;
    ["metal.003"]: THREE.MeshStandardMaterial;
    photoImg4: THREE.MeshStandardMaterial;
    bookbinding2: THREE.MeshStandardMaterial;
    photoImg5: THREE.MeshStandardMaterial;
    bookbinding3: THREE.MeshStandardMaterial;
    photoImg6: THREE.MeshStandardMaterial;
    ["Material.006"]: THREE.MeshStandardMaterial;
    photoImg7: THREE.MeshStandardMaterial;
    photoImg0: THREE.MeshStandardMaterial;
  };
};

let modelPath: string = "/models/photos.gltf";
import.meta.env.PROD ? (modelPath = awsModelPath(modelPath)) : null;
export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(modelPath) as GLTFResult;
  const photoSources = photoHandler();
  const photoTextures = photoSources.map((source) => {
    return new TextureLoader().load(source);
  });
  // set the photo textures on the photoImg materials
  for (let i = 0; i < photoTextures.length; i++) {
    let photo = materials[`photoImg${i}`];
    if (photo) photo.map = photoTextures[i];
  }

  useEffect(() => {
    console.log(photoSources);
  });
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube.geometry}
        material={materials.photoImg0}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube009_1.geometry}
        material={materials.photoImg1}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube010_1.geometry}
        material={materials.photoImg2}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube011_1.geometry}
        material={materials.photoImg3}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube014_1.geometry}
        material={materials.photoImg4}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube015_1.geometry}
        material={materials.photoImg5}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube016_1.geometry}
        material={materials.photoImg6}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube017_1.geometry}
        material={materials.photoImg7}
      />
      <Select enabled>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube011.geometry}
          material={materials["text.001"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube_1.geometry}
          material={materials.bookbinding1}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube017.geometry}
          material={materials["Material.006"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube016.geometry}
          material={materials.bookbinding3}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube015.geometry}
          material={materials.bookbinding2}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube014.geometry}
          material={materials["metal.003"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube009.geometry}
          material={materials.bookbinding7}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube010.geometry}
          material={materials.bookbinding1}
        />
      </Select>
    </group>
  );
}

useGLTF.preload(modelPath);
